buildscript {
	ext {
		springBootVersion = "${findProperty('bootVersion') ?: bootVersion}"
		contractVersion = "${findProperty('verifierVersion') ?: verifierVersion}"
	}
	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "http://repo.spring.io/snapshot" }
		maven { url "http://repo.spring.io/milestone" }
		maven { url "http://repo.spring.io/release" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		// Add contract plugin to the classpath
		classpath("org.springframework.cloud:spring-cloud-contract-gradle-plugin:${contractVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

// apply the contract plugin
apply plugin: 'spring-cloud-contract'


group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	mavenLocal()
	maven { url "http://repo.spring.io/snapshot" }
	maven { url "http://repo.spring.io/milestone" }
	maven { url "http://repo.spring.io/release" }
}


ext {
	springCloudVersion = "${findProperty('$BOM_VERSION') ?: BOM_VERSION}"
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-jersey')
	implementation('org.springframework.boot:spring-boot-starter-jetty')

	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.cloud:spring-cloud-starter-contract-verifier') {
		exclude group: 'org.eclipse.jetty'
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// Add the contract plugin setup

contracts {
	// Test setup
	testFramework = "JUNIT"
	testMode = "JAXRSCLIENT"
	baseClassForTests = "com.example.demo.BaseClass"
}

test {
	testLogging {
		exceptionFormat = 'full'
	}
	afterSuite { desc, result ->
		if (!desc.parent) {
			println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			if (result.testCount == 0) {
				throw new IllegalStateException("No tests were found. Failing the build")
			}
		}
	}
}