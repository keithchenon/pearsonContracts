buildscript {
	ext {
		springBootVersion = "${findProperty('bootVersion') ?: bootVersion}"
		contractVersion = "${findProperty('verifierVersion') ?: verifierVersion}"
	}
	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "http://repo.spring.io/snapshot" }
		maven { url "http://repo.spring.io/milestone" }
		maven { url "http://repo.spring.io/release" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		// Add contract plugin to the classpath
		classpath("org.springframework.cloud:spring-cloud-contract-gradle-plugin:${contractVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven-publish'
apply plugin: 'io.spring.dependency-management'

// apply the contract plugin
apply plugin: 'spring-cloud-contract'


group = 'com.example'
version = '2.0.0.RELEASE'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	mavenLocal()
	maven { url "http://repo.spring.io/snapshot" }
	maven { url "http://repo.spring.io/milestone" }
	maven { url "http://repo.spring.io/release" }
}


ext {
	springCloudVersion = "${findProperty('$BOM_VERSION') ?: BOM_VERSION}"
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web')

	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.cloud:spring-cloud-starter-contract-verifier')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// Add the contract plugin setup

task apiCompatibility(type: Test) {
	description = "Task to run api compatbility tests"
	testLogging {
		exceptionFormat = 'full'
	}
	jvmArgs = systemPropsFromGradle()
	include '**/contracttests/**'
}

private List<String> systemPropsFromGradle() {
	return project.gradle.startParameter.systemPropertiesArgs.entrySet().
			collect { "-D${it.key}=${it.value}" }
}

if (gradle.startParameter.taskRequests.any { it.args.contains("apiCompatibility") }) {
	contracts {
		baseClassForTests = "com.example.demo.BaseClass"
		contractsPath = "/"
		// pre Grenwich (2.1.0)
		contractsSnapshotCheckSkip = true
		contractRepository {
			repositoryUrl('http://localhost:8081/artifactory/libs-release-local')
		}
		setContractsMode("REMOTE")
		contractDependency {
			groupId = project.group
			artifactId = project.name
			delegate.classifier = "stubs"
			delegate.version = getProp("latestProductionVersion")
		}
	}
}
else {
	contracts {
		// Test setup
		testMode = "EXPLICIT"
		baseClassForTests = "com.example.demo.BaseClass"
		contractsSnapshotCheckSkip = true
	}
}

test.enabled = false

publishing {
	repositories {
		maven {
			url 'http://localhost:8081/artifactory/libs-release-local'
			credentials {
				username 'admin'
				password 'password'
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId project.name
			from components.java
		}
	}
}

String getProp(String propName) {
	return hasProperty(propName) ?
			(getProperty(propName) ?: System.properties[propName]) : System.properties[propName] ?:
			System.getenv(propName)
}